// ------------------------------------------------
// Technical stuff
// ------------------------------------------------
const WINNER_STORAGE = 'winner'
const RANDOM_SEED_STORAGE = 'randomSeed'
const CHECKED_CELLS_STORAGE = 'checkedCells'

const mainDiagonal = ['a1', 'b2', 'c3', 'd4', 'e5']
const secondaryDiagonal = ['a5', 'b4', 'c3', 'd2', 'e1']

const updateBingo = function (id) {
    const checkedCells = localStorage.getItem(CHECKED_CELLS_STORAGE).split(',').filter(cell => cell !== '')
    checkedCells.re
    if (document.getElementById(id).classList.contains('table-active')) {
        checkedCells.push(id)
    } else {
        checkedCells.splice(checkedCells.indexOf(id), 1)
    }
    if (checkedCells.length === 0) {
        localStorage.removeItem(WINNER_STORAGE)
    } else if (checkedCells.length === 1) {
        localStorage.setItem(WINNER_STORAGE, 'in progress')
    }
    localStorage.setItem(CHECKED_CELLS_STORAGE, checkedCells.join(','))

    const xCoordinate = id.charAt(0)
    const yCoordinate = id.charAt(1)
    let winner = false
    let rowElements = Array.from([1, 2, 3, 4, 5])
        .map(yCoordinate => document.getElementById(xCoordinate + yCoordinate))
    if (rowElements.every(element => element.classList.contains('table-active'))) {
        rowElements.forEach(element => element.classList.add('bg-info'))
        winner = true
    } else {
        rowElements.forEach(element => element.classList.remove('bg-info'))
    }

    let columnElements = Array.from('abcde')
        .map(xCoordinate => document.getElementById(xCoordinate + yCoordinate))
    if (columnElements.every(element => element.classList.contains('table-active'))) {
        columnElements.forEach(element => element.classList.add('bg-primary'))
        winner = true
    } else {
        columnElements.forEach(element => element.classList.remove('bg-primary'))
    }

    if (mainDiagonal.indexOf(id) !== -1) {
        let mainDiagonalElements = Array.from(mainDiagonal)
            .map(xyCoordinate => document.getElementById(xyCoordinate))
        if (mainDiagonalElements.every(element => element.classList.contains('table-active'))) {
            mainDiagonalElements.forEach(element => element.classList.add('bg-success'))
            winner = true
        } else {
            mainDiagonalElements.forEach(element => element.classList.remove('bg-success'))
        }
    }

    if (secondaryDiagonal.indexOf(id) !== -1) {
        let secondaryDiagonalElements = Array.from(secondaryDiagonal)
            .map(xyCoordinate => document.getElementById(xyCoordinate))
        if (secondaryDiagonalElements.every(element => element.classList.contains('table-active'))) {
            secondaryDiagonalElements.forEach(element => element.classList.add('bg-danger'))
            winner = true
        } else {
            secondaryDiagonalElements.forEach(element => element.classList.remove('bg-danger'))
        }
    }

    return winner
}

const bingoClick = function () {
    this.classList.toggle('table-active')
    const bingo = updateBingo(this.id)
    if (this.classList.contains('table-active') && bingo) {
        document.getElementById('alert-container').innerHTML +=
            '    <div class="alert alert-success alert-dismissible fade show" role="alert">\n' +
            '         <strong>Bingo!</strong> Winner winner chicken dinner\n' +
            '         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n' +
            '     </div>\n'
        launchFireworks()
        localStorage.setItem(WINNER_STORAGE, 'true')
    }
}

// ------------------------------------------------
// Content
// ------------------------------------------------

// These are magical values generated by java code
const fieldMaps = [
    ['12345', '24531', '53214', '31452', '45123'],
    ['12345', '25413', '43251', '54132', '31524'],
    ['12345', '34512', '51234', '23451', '45123'],
    ['12345', '35214', '51432', '43521', '24153'],
    ['12345', '45123', '23451', '51234', '34512'],
    ['12345', '45231', '53412', '31524', '24153'],
    ['12345', '53124', '25431', '41253', '34512'],
    ['12345', '53412', '45231', '24153', '31524']
]

// Grouped by category and sorted by probability within a category.
// Designed to include positive events to have fun.
// All events have high probability, so everyone can win and multiple wins are possible
const events = [
    [ // something spoken by Kate
        '👱‍♀️ Guys, guys',
        '👱‍♀️ Who haven\'t you worked with?',
        '👱‍♀️ %name%, what is your name?',
        '👱‍♀️ 1 minute, guys',
        '👱‍♀️ What did you learn about your partner?'
    ], [ // process
        '❓ Today\'s topic is...',
        '📷 Group photo',
        '👋 See you next week!',
        '💵 One-time payment',
        '💰 Subscription payment',
    ], [ // about attendees
        '🧑 Fair-weather visitors',
        '🧓 Perennials (5+ in a row)',
        '👶 New people',
        '🌍 People from different countries',
        '🙊 Other language(s) spoken'
    ], [ // entourage
        '🪑🪑 Joined tables',
        '☕ Drinking hot beverages',
        '📄 Paper cards',
        '⬜ Writing on whiteboard',
        '🖼 Hand-drawn pictures'
    ], [ // activities
        '🏃‍♂️ People switch chairs',
        '🖊 Grab a pen',
        '🤣 Laugh out loud',
        '🧍‍♀️ Let\'s stand up, guys',
        '🎲 Let\'s play a game'
    ]
]

function hexToIndexes(hex) {
    var permutationNumber = parseInt(hex, 16) // [0..119]
    const originalIndexes = [0, 1, 2, 3, 4]
    const resultIndexes = []
    const firstIndex = permutationNumber / 24 // [0..4]
    resultIndexes.push(originalIndexes.splice(firstIndex, 1)[0])
    permutationNumber = permutationNumber % 24
    const secondIndex = permutationNumber / 6 // [0..3]
    resultIndexes.push(originalIndexes.splice(secondIndex, 1)[0])
    permutationNumber = permutationNumber % 6
    const thirdIndex = permutationNumber / 2 // [0..2]
    resultIndexes.push(originalIndexes.splice(thirdIndex, 1)[0])
    const fourthIndex = permutationNumber % 2 // [0..1]
    resultIndexes.push(originalIndexes.splice(fourthIndex, 1)[0])
    resultIndexes.push(originalIndexes.splice(0, 1)[0])
    // console.log('hex = ' + hex + ', resultIndexes = ' + resultIndexes)
    return resultIndexes
}

function generateRandomSeed() {
    var randomSeed = ''
    randomSeed += Math.floor(random(0, 7))
    for (let i = 0; i < 6; i++) {
        randomSeed += ':' + Math.floor(random(0, 119)).toString(16)
    }
    return randomSeed
}

const loadPlayingField = function () {
    // randomSeed structure
    // <index in fieldMaps - 8 options>
    // :<mapping between numbers in fieldMaps and events - 120 options>
    // :<permutation in event category - 120 options> {5 times}
    let randomSeed
    let checkedCells
    if ((localStorage.getItem(WINNER_STORAGE) || 'true') === 'true') {
        // generate new state
        localStorage.removeItem(WINNER_STORAGE)
        randomSeed = generateRandomSeed()
        checkedCells = []
        localStorage.setItem(RANDOM_SEED_STORAGE, randomSeed)
        localStorage.setItem(CHECKED_CELLS_STORAGE, '')
    } else {
        // restore state
        randomSeed = localStorage.getItem(RANDOM_SEED_STORAGE)
        checkedCells = localStorage.getItem(CHECKED_CELLS_STORAGE).split(',').filter(cell => cell !== '')
    }

    const hexNumbers = randomSeed.split(':')
    Array.from(checkedCells)
        .map(checkedCell => document.getElementById(checkedCell))
        .forEach(element => element.classList.add('table-active'))

    const fieldMap = fieldMaps[parseInt(hexNumbers[0])];
    // console.log('fieldMap = ' + fieldMap)
    const categoryMapIndexes = hexToIndexes(hexNumbers[1]);
    // console.log('categoryMapIndexes = ' + categoryMapIndexes)
    const categoryIndexes = [
        hexToIndexes(hexNumbers[2]),
        hexToIndexes(hexNumbers[3]),
        hexToIndexes(hexNumbers[4]),
        hexToIndexes(hexNumbers[5]),
        hexToIndexes(hexNumbers[6])
    ];
    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 5; j++) {
            const genericFieldCategory = fieldMap[i].charCodeAt(j) - '1'.charCodeAt(0) // [0..4]
            const concreteFieldCategory = categoryMapIndexes[genericFieldCategory] // [0..4]
            // console.log('concreteFieldCategory = ' + concreteFieldCategory)
            const eventInCategoryIndex = categoryIndexes[concreteFieldCategory][i] // [0..4]
            // console.log('eventInCategoryIndex = ' + eventInCategoryIndex)

            const xCoordinate = String.fromCharCode('a'.charCodeAt(0) + i);
            const yCoordinate = String.fromCharCode('1'.charCodeAt(0) + j);
            const event = events[concreteFieldCategory][eventInCategoryIndex];
            // console.log('set ' + xCoordinate + yCoordinate + ' to ' + event)
            document.getElementById(xCoordinate + yCoordinate).textContent = event
        }
    }
}
